#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Master CONFIG and its functions."""

from argparse import ArgumentParser
import datetime
import os
import pprint
import sys

try:
    import yaml
except ImportError:
    print('Unable to locate the "pyyaml" module. '
          'Please install with "pip install pyyaml" (http://pyyaml.org/wiki/PyYAML)')
    sys.exit(1)

application_name = "LDAP to Subversion Authz Bridge, evolved"
application_version = "0.0.1"
application_description = "The '%s' is a simple script that will query your " \
                          "directory server for group objects and create a " \
                          "representation of those groups in your Subversion " \
                          "authorization (authz) file as per handy YAML config"\
                          % application_name

#   These are initial values. They have to be defined here in order to be...
#      found and rewritten by yaml/cmd/env. If no default value, use None
CONFIG = {
    'config_file':          'config.yml',
    'dry_run':              False,
    'debug':                False,
    'env_pfx':              'LD2SVN',
    'ldap' : {
        'url' :             'localhost',
        'bind_dn':          None,
        'bind_pw':          None,
        'search_dn':        None,
        'user_query':       '(&(objectclass=user)'
                            '(!(userAccountControl:1.2.840.113556.1.4.803:=2)))',
        'objid_attribute':  'sAMAccountName',
        'group_traversal':  False,
    },
    'svn': {
        'authz_path':       None,
        'authz_header':     '#\n# Generated by '+application_name +' (ver. '+application_version+')'+
                            '\n#  '+ datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")+
                            '\n#',
        'authz_footer':     '\n',
        'repo_name':        None,
        'repos_root':       '/home/svn',
        'default_perms':    'r',
        'default_everyone_perms': '',
        'default_groupname_pfx': 'svn-',
        'access':  {
            'EVERYONE': None,
        },
    },
}


# Обязательные параметры
REQUIRED_PROPS = {
    'ldap': ('url', 'bind_dn', 'bind_pw'),
    'svn': ('repos_root', 'repo_name')
}

# Параметры, поддерижваемые к применению из среды окружения
SUPPORTED_ENV = {
    'ldap': ('url', 'bind_dn', 'bind_pw'),
    'svn': ('repos_root', 'repo_name', 'authz_path')
}

# groups: 'g1':[], access: '@g1':''...
AUTHZ = {
    'groups': {},
    'access': {}
}

################################################################################
# defs
################################################################################
def check_minimal_propset():
    """This function checks required properties are set. Terminates script on fail"""

    unset_properties = []
    for node, val in REQUIRED_PROPS.iteritems():
        for param in val:
            if CONFIG[node][param] is None:
                unset_properties.append("%s.%s" % (node, param))

    if len(unset_properties) > 0:
        print("[ERROR] There is not enough information to proceed."
              "Please define these properties: %s" % unset_properties)
        return False
    else:
        return True

def arg_parser():
    """Creates an ArgumentParser and returns it."""
    #
    # use dest= variables as they named in CONFIG
    #
    parser = ArgumentParser(prog=os.path.basename(__file__),
                            description=application_description)

    parser.add_argument("-l", "--url", dest="url",
                        help="LDAP server url (DEFAULT:%s)" % CONFIG['ldap']['url'])

    parser.add_argument("-b", "--bind-dn", dest="bind_dn",
                        help="The DN at which to perform the recursive search")

    parser.add_argument("-p", "--bind-password", dest="bind_pw",
                        help="The password for the user specified with the ")

    parser.add_argument("-r", "--repo-name", dest="repo_name",
                        help="Repository name")

    parser.add_argument("--repos-root", dest="repos_root",
                        help="The root homedir of all svn repositories"
                             " (DEFAULT:%s)" % CONFIG['svn']['repos_root'])

    parser.add_argument("--dry-run", dest="dry_run", action='store_true',
                        help="just STDOUT what should be written to authz")

    parser.add_argument("-d", "--debug", dest="debug", action='store_true',
                        help="be more verbose")

    parser.add_argument("-z", "--authz-path", dest="authz_path",
                        help="The path to the authz file to update/create."
                             " If not specified, the path will be constructed this way: "
                             "<repos_root>/<repo_name>/conf/authz")

    parser.add_argument("--authz-header", dest="authz_header",
                        help="header to be inserted @top of authz file")

    parser.add_argument("--authz-footer", dest="authz_footer",
                        help="footer to be inserted @bottom of authz file")

    parser.add_argument('--version', action='version',
                        version='%(application_name)-%(application_version)')

    parser.add_argument("-c", "--config-file", dest="config_file",
                        help="use this config file (DEFAULT: %s)" % CONFIG['config_file'])

    # if config file is in args, rewrite CONFIG's value ASAP, i.e. NOW!
    args = parser.parse_args(args=None, namespace=None)
    if args.config_file is not None:
        CONFIG['config_file'] = args.config_file
    return args


def apply_cmdargs(cmd_args):
    """Walks through the root keys of CONFIG and rewrites its values
       with ones given in cmd args."""

    for node in CONFIG.iterkeys():
        if isinstance(CONFIG[node], dict):
            for p in CONFIG[node].iterkeys():
                try:
                    value = getattr(cmd_args, p)
                    if not value is None:
                        CONFIG[node][p] = value
                except AttributeError:
                    pass
        elif isinstance(CONFIG[node], str) or isinstance(CONFIG[node], bool):
            try:
                value = getattr(cmd_args, node)
                if not value is None:
                    CONFIG[node] = value
            except AttributeError:
                pass


def load_config_file(yaml_config):
    """Return yaml config as dict"""
    try:
        cfg = yaml.load(open(yaml_config))
    except Exception as e:
        print e
        sys.exit(1)
    return cfg


def apply_yamlargs(yaml):
    """Rewrites CONFIG{} with yaml's parameters. svn.access is skipped here"""

    for node in CONFIG.iterkeys():
        if isinstance(CONFIG[node], dict):
            for p in CONFIG[node].iterkeys():
                if p != 'access':
                    try:
                        CONFIG[node][p] = yaml[node][p]
                    except KeyError:
                        pass

def apply_env():
    """Rewrites CONFIG{} with ENV parameters."""

    for node, val in SUPPORTED_ENV.iteritems():
        for param in val:
            env_var = (CONFIG['env_pfx'] + '_' + node + '_' + param).upper()
            env_value = os.environ.get(env_var)
            if env_value is not None:
                CONFIG[node][param] = env_value


def load_svn_accesses(yaml):
    """Loads svn repo access config."""
    if CONFIG['svn']['repo_name'] in yaml['svn']['access']:
        CONFIG['svn']['access'] = yaml['svn']['access'][CONFIG['svn']['repo_name']]
    elif 'default' in yaml['svn']['access']:
        print("[INFO] using DEFAULT authz access template for the '%s' repo\n"
              % CONFIG['svn']['repo_name'] )
        CONFIG['svn']['access'] = yaml['svn']['access']['default']

    else:
        print("[ERROR] please define %s access template or at least default one"
              % CONFIG['svn']['repo_name'])
        sys.exit(1)


def load():
    """Loads CONFIG from cmd_args/yaml/env."""
    cmd_args = arg_parser()
    yaml_cfg = load_config_file(CONFIG['config_file'])

    # rewrite CONFIG parameters in order: yaml <= env <= cmd
    apply_yamlargs(yaml_cfg)
    apply_env()
    apply_cmdargs(cmd_args)

    if not check_minimal_propset():
        sys.exit(1)

    load_svn_accesses(yaml_cfg)

    if CONFIG['debug']:
        pprint.pprint(CONFIG['svn']['access'])
